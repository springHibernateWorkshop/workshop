package spring.workshop.expenses.rest;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import spring.workshop.expenses.entities.User;
import spring.workshop.expenses.repos.UserRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /user (after Application path)
public class UserController {

  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path = "/add") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<?> addNewUser(@RequestParam String name) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    if (name != null && !name.trim().isEmpty()) {
      Optional<User> user = userRepository.findByName(name);
      if (user.isPresent()) {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
            .body("User with name = " + name + " already exists.");
      } else {
        User newUser = new User(name);
        userRepository.save(newUser);
        return ResponseEntity.status(HttpStatus.CREATED)
            .body("User with name = " + name + " created successfully.");
      }
    } else {
      return ResponseEntity.status(HttpStatus.BAD_REQUEST)
          .body("User with empty name cannot be created.");
    }
  }

  @DeleteMapping(path = "/delete") // Map ONLY DELETE Requests
  public @ResponseBody ResponseEntity<?> deleteUser(@RequestParam String name) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the DELETE request

    Optional<User> user = userRepository.findByName(name);
    if (user.isPresent()) {
      userRepository.deleteByName(name);
      return ResponseEntity.ok("User with name = " + name + " deleted successfully.");
    } else {
      return ResponseEntity.status(HttpStatus.NOT_FOUND)
          .body("User with name = " + name + " not found.");

    }
  }

  @GetMapping(path = "/getAll")
  public @ResponseBody List<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  @GetMapping(path = "/getById")
  public ResponseEntity<?> getUserById(@RequestParam Integer id) {
    Optional<User> user = userRepository.findById(id);

    if (user.isPresent()) {
      return ResponseEntity.ok(user.get());
    } else {
      return ResponseEntity.status(HttpStatus.NOT_FOUND)
          .body("User with id = " + id + " not found.");
    }
  }

  @GetMapping(path = "/getByName")
  public ResponseEntity<?> getUserByName(@RequestParam String name) {
    Optional<User> user = userRepository.findByName(name);

    if (user.isPresent()) {
      return ResponseEntity.ok(user.get());
    } else {
      return ResponseEntity.status(HttpStatus.NOT_FOUND)
          .body("User with name = " + name + " not found.");
    }
  }
}
